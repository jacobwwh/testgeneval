{
    "pytest_cmdline_main": {
        "func_name": "pytest_cmdline_main",
        "class": "",
        "executed_lines": [
            130,
            133,
            136
        ],
        "missing_lines": [
            131,
            132,
            134,
            135
        ],
        "all_lines": [
            130,
            131,
            132,
            133,
            134,
            135,
            136
        ]
    },
    "pytest_pyfunc_call": {
        "func_name": "pytest_pyfunc_call",
        "class": "",
        "executed_lines": [
            180,
            181,
            183,
            184,
            185,
            186,
            188
        ],
        "missing_lines": [
            182,
            187
        ],
        "all_lines": [
            180,
            181,
            182,
            183,
            184,
            185,
            186,
            187,
            188
        ]
    },
    "pytest_collect_file": {
        "func_name": "pytest_collect_file",
        "class": "",
        "executed_lines": [
            192,
            193,
            194,
            197,
            198,
            199,
            200
        ],
        "missing_lines": [
            201
        ],
        "all_lines": [
            192,
            193,
            194,
            197,
            198,
            199,
            200,
            201
        ]
    },
    "pytest_pycollect_makeitem": {
        "func_name": "pytest_pycollect_makeitem",
        "class": "",
        "executed_lines": [
            220,
            221,
            222,
            223,
            225,
            229,
            239,
            240,
            248,
            249
        ],
        "missing_lines": [
            230,
            231,
            241,
            242,
            245,
            246
        ],
        "all_lines": [
            220,
            221,
            222,
            223,
            225,
            229,
            230,
            231,
            239,
            240,
            241,
            242,
            245,
            246,
            248,
            249
        ]
    },
    "PyobjMixin.getmodpath": {
        "func_name": "getmodpath",
        "class": "PyobjMixin",
        "executed_lines": [
            303,
            304,
            305,
            306,
            307,
            308,
            309,
            310,
            311,
            312,
            313,
            315,
            316,
            317,
            318
        ],
        "missing_lines": [
            314
        ],
        "all_lines": [
            303,
            304,
            305,
            306,
            307,
            308,
            309,
            310,
            311,
            312,
            313,
            314,
            315,
            316,
            317,
            318
        ]
    },
    "PyobjMixin.reportinfo": {
        "func_name": "reportinfo",
        "class": "PyobjMixin",
        "executed_lines": [
            322,
            323,
            324,
            332,
            333,
            334,
            337,
            338,
            339
        ],
        "missing_lines": [
            326,
            327,
            328,
            329,
            330,
            336
        ],
        "all_lines": [
            322,
            323,
            324,
            326,
            327,
            328,
            329,
            330,
            332,
            333,
            334,
            336,
            337,
            338,
            339
        ]
    },
    "PyCollector.istestfunction": {
        "func_name": "istestfunction",
        "class": "PyCollector",
        "executed_lines": [
            379,
            380,
            383,
            385
        ],
        "missing_lines": [
            382
        ],
        "all_lines": [
            379,
            380,
            382,
            383,
            385
        ]
    },
    "PyCollector._matches_prefix_or_glob_option": {
        "func_name": "_matches_prefix_or_glob_option",
        "class": "PyCollector",
        "executed_lines": [
            393,
            394,
            395,
            399,
            403
        ],
        "missing_lines": [
            402
        ],
        "all_lines": [
            393,
            394,
            395,
            399,
            402,
            403
        ]
    },
    "PyCollector.collect": {
        "func_name": "collect",
        "class": "PyCollector",
        "executed_lines": [
            406,
            411,
            412,
            413,
            414,
            415,
            416,
            417,
            420,
            421,
            422,
            423,
            425,
            426,
            429,
            430,
            431,
            432,
            434,
            436,
            440,
            441
        ],
        "missing_lines": [
            407,
            424
        ],
        "all_lines": [
            406,
            407,
            411,
            412,
            413,
            414,
            415,
            416,
            417,
            420,
            421,
            422,
            423,
            424,
            425,
            426,
            429,
            430,
            431,
            432,
            434,
            436,
            440,
            441
        ]
    },
    "PyCollector._genfunctions": {
        "func_name": "_genfunctions",
        "class": "PyCollector",
        "executed_lines": [
            444,
            445,
            446,
            447,
            448,
            449,
            451,
            452,
            454,
            462,
            463,
            465,
            468,
            470,
            471,
            474,
            479,
            481,
            482,
            483
        ],
        "missing_lines": [
            464,
            466
        ],
        "all_lines": [
            444,
            445,
            446,
            447,
            448,
            449,
            451,
            452,
            454,
            462,
            463,
            464,
            465,
            466,
            468,
            470,
            471,
            474,
            479,
            481,
            482,
            483
        ]
    },
    "Module._importtestmodule": {
        "func_name": "_importtestmodule",
        "class": "Module",
        "executed_lines": [
            574,
            575,
            576,
            577,
            581,
            591,
            607,
            608,
            609,
            610,
            616,
            617
        ],
        "missing_lines": [
            578,
            582,
            592,
            593,
            594,
            595,
            600,
            601
        ],
        "all_lines": [
            574,
            575,
            576,
            577,
            578,
            581,
            582,
            591,
            592,
            593,
            594,
            595,
            600,
            601,
            607,
            608,
            609,
            610,
            616,
            617
        ]
    },
    "Package._recurse": {
        "func_name": "_recurse",
        "class": "Package",
        "executed_lines": [
            671,
            672,
            673,
            674,
            675,
            677,
            678,
            680
        ],
        "missing_lines": [
            676,
            679
        ],
        "all_lines": [
            671,
            672,
            673,
            674,
            675,
            676,
            677,
            678,
            679,
            680
        ]
    },
    "Package._collectfile": {
        "func_name": "_collectfile",
        "class": "Package",
        "executed_lines": [
            685,
            690,
            691,
            692,
            695,
            696,
            697,
            698,
            699,
            700,
            702,
            704
        ],
        "missing_lines": [
            693
        ],
        "all_lines": [
            685,
            690,
            691,
            692,
            693,
            695,
            696,
            697,
            698,
            699,
            700,
            702,
            704
        ]
    },
    "Package.collect": {
        "func_name": "collect",
        "class": "Package",
        "executed_lines": [
            707,
            708,
            709,
            713,
            714,
            715,
            718,
            719,
            720,
            722,
            723,
            727,
            729,
            730,
            731,
            734,
            735
        ],
        "missing_lines": [
            712,
            733
        ],
        "all_lines": [
            707,
            708,
            709,
            712,
            713,
            714,
            715,
            718,
            719,
            720,
            722,
            723,
            727,
            729,
            730,
            731,
            733,
            734,
            735
        ]
    },
    "_call_with_optional_argument": {
        "func_name": "_call_with_optional_argument",
        "class": "",
        "executed_lines": [
            741,
            742,
            744,
            745
        ],
        "missing_lines": [
            743,
            747
        ],
        "all_lines": [
            741,
            742,
            743,
            744,
            745,
            747
        ]
    },
    "Class.collect": {
        "func_name": "collect",
        "class": "Class",
        "executed_lines": [
            768,
            770,
            780,
            791,
            792,
            794
        ],
        "missing_lines": [
            769,
            771,
            772,
            779,
            781,
            782,
            789
        ],
        "all_lines": [
            768,
            769,
            770,
            771,
            772,
            779,
            780,
            781,
            782,
            789,
            791,
            792,
            794
        ]
    },
    "Class._inject_setup_class_fixture": {
        "func_name": "_inject_setup_class_fixture",
        "class": "Class",
        "executed_lines": [
            803,
            804,
            805,
            806
        ],
        "missing_lines": [
            808,
            814,
            823
        ],
        "all_lines": [
            803,
            804,
            805,
            806,
            808,
            814,
            823
        ]
    },
    "Class._inject_setup_method_fixture": {
        "func_name": "_inject_setup_method_fixture",
        "class": "Class",
        "executed_lines": [
            832,
            833,
            834,
            835
        ],
        "missing_lines": [
            837,
            843,
            853
        ],
        "all_lines": [
            832,
            833,
            834,
            835,
            837,
            843,
            853
        ]
    },
    "hasinit": {
        "func_name": "hasinit",
        "class": "",
        "executed_lines": [
            878,
            879,
            880
        ],
        "missing_lines": [
            881
        ],
        "all_lines": [
            878,
            879,
            880,
            881
        ]
    },
    "hasnew": {
        "func_name": "hasnew",
        "class": "",
        "executed_lines": [
            885,
            886,
            887
        ],
        "missing_lines": [
            888
        ],
        "all_lines": [
            885,
            886,
            887,
            888
        ]
    },
    "CallSpec2.setmulti2": {
        "func_name": "setmulti2",
        "class": "CallSpec2",
        "executed_lines": [
            933,
            934,
            936,
            937,
            939,
            940,
            943,
            944,
            945,
            946
        ],
        "missing_lines": [
            935,
            938
        ],
        "all_lines": [
            933,
            934,
            935,
            936,
            937,
            938,
            939,
            940,
            943,
            944,
            945,
            946
        ]
    },
    "Metafunc.parametrize": {
        "func_name": "parametrize",
        "class": "Metafunc",
        "executed_lines": [
            1058,
            1060,
            1067,
            1069,
            1075,
            1076,
            1078,
            1080,
            1083,
            1088,
            1093,
            1096,
            1103,
            1104,
            1105,
            1106,
            1107,
            1116,
            1117
        ],
        "missing_lines": [
            1070,
            1084,
            1085,
            1086,
            1094
        ],
        "all_lines": [
            1058,
            1060,
            1067,
            1069,
            1070,
            1075,
            1076,
            1078,
            1080,
            1083,
            1084,
            1085,
            1086,
            1088,
            1093,
            1094,
            1096,
            1103,
            1104,
            1105,
            1106,
            1107,
            1116,
            1117
        ]
    },
    "Metafunc._resolve_arg_ids": {
        "func_name": "_resolve_arg_ids",
        "class": "Metafunc",
        "executed_lines": [
            1141,
            1142,
            1143,
            1150
        ],
        "missing_lines": [
            1144,
            1145,
            1146,
            1148,
            1149
        ],
        "all_lines": [
            1141,
            1142,
            1143,
            1144,
            1145,
            1146,
            1148,
            1149,
            1150
        ]
    },
    "Metafunc._resolve_arg_value_types": {
        "func_name": "_resolve_arg_value_types",
        "class": "Metafunc",
        "executed_lines": [
            1205,
            1206,
            1227
        ],
        "missing_lines": [
            1209,
            1210,
            1211,
            1212,
            1213,
            1219,
            1221
        ],
        "all_lines": [
            1205,
            1206,
            1209,
            1210,
            1211,
            1212,
            1213,
            1219,
            1221,
            1227
        ]
    },
    "Metafunc._validate_if_using_arg_names": {
        "func_name": "_validate_if_using_arg_names",
        "class": "Metafunc",
        "executed_lines": [
            1240,
            1241,
            1242,
            1243
        ],
        "missing_lines": [
            1244,
            1245,
            1252,
            1253,
            1255,
            1256
        ],
        "all_lines": [
            1240,
            1241,
            1242,
            1243,
            1244,
            1245,
            1252,
            1253,
            1255,
            1256
        ]
    },
    "_find_parametrized_scope": {
        "func_name": "_find_parametrized_scope",
        "class": "",
        "executed_lines": [
            1276,
            1279,
            1281,
            1294
        ],
        "missing_lines": [
            1277,
            1282,
            1283,
            1288,
            1290,
            1291,
            1292
        ],
        "all_lines": [
            1276,
            1277,
            1279,
            1281,
            1282,
            1283,
            1288,
            1290,
            1291,
            1292,
            1294
        ]
    },
    "_ascii_escaped_by_config": {
        "func_name": "_ascii_escaped_by_config",
        "class": "",
        "executed_lines": [
            1298,
            1301,
            1307
        ],
        "missing_lines": [
            1299
        ],
        "all_lines": [
            1298,
            1299,
            1301,
            1307
        ]
    },
    "_idval": {
        "func_name": "_idval",
        "class": "",
        "executed_lines": [
            1318,
            1328,
            1329,
            1332,
            1335,
            1336,
            1337,
            1338,
            1339,
            1341,
            1344,
            1346,
            1350
        ],
        "missing_lines": [
            1319,
            1320,
            1321,
            1322,
            1323,
            1324,
            1325,
            1326,
            1327,
            1333,
            1340,
            1343,
            1345,
            1348,
            1349
        ],
        "all_lines": [
            1318,
            1319,
            1320,
            1321,
            1322,
            1323,
            1324,
            1325,
            1326,
            1327,
            1328,
            1329,
            1332,
            1333,
            1335,
            1336,
            1337,
            1338,
            1339,
            1340,
            1341,
            1343,
            1344,
            1345,
            1346,
            1348,
            1349,
            1350
        ]
    },
    "_idvalset": {
        "func_name": "_idvalset",
        "class": "",
        "executed_lines": [
            1362,
            1364,
            1365,
            1366,
            1370
        ],
        "missing_lines": [
            1363,
            1372
        ],
        "all_lines": [
            1362,
            1363,
            1364,
            1365,
            1366,
            1370,
            1372
        ]
    },
    "idmaker": {
        "func_name": "idmaker",
        "class": "",
        "executed_lines": [
            1383,
            1391,
            1392,
            1406
        ],
        "missing_lines": [
            1395,
            1398,
            1401,
            1402,
            1403,
            1404
        ],
        "all_lines": [
            1383,
            1391,
            1392,
            1395,
            1398,
            1401,
            1402,
            1403,
            1404,
            1406
        ]
    },
    "Function.__init__": {
        "func_name": "__init__",
        "class": "Function",
        "executed_lines": [
            1576,
            1578,
            1579,
            1587,
            1592,
            1593,
            1594,
            1595,
            1599,
            1603,
            1604,
            1605,
            1610,
            1618,
            1619,
            1622,
            1623,
            1624
        ],
        "missing_lines": [
            1602
        ],
        "all_lines": [
            1576,
            1578,
            1579,
            1587,
            1592,
            1593,
            1594,
            1595,
            1599,
            1602,
            1603,
            1604,
            1605,
            1610,
            1618,
            1619,
            1622,
            1623,
            1624
        ]
    }
}